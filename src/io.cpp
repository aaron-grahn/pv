#include <memory>
#include <iostream>
#include <iomanip>
#include <sstream>
#include <cassert>
#include "io.h"
#include "buffer.h"
#include "random_buffer.h"
#include "crypto_port.h"

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
Io::Istream::Byte::Byte(std::istream &is)
   : m_is(is)
{
}

////////////////////////////////////////////////////////////////////////////////
Buffer Io::Istream::Byte::read()
{
   std::string data;
   m_is >> data;
   return decode(data);
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
Io::Istream::Hex::Hex(std::istream &is)
   : Io::Istream::Byte::Byte(is)
{
}

////////////////////////////////////////////////////////////////////////////////
Buffer Io::Istream::Hex::decode(std::string const&)
{
   // Not implemented.
   assert(false);
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
Io::Istream::Base64::Base64(std::istream &is)
   : Io::Istream::Byte::Byte(is)
{
}

////////////////////////////////////////////////////////////////////////////////
Buffer Io::Istream::Base64::decode(std::string const &data)
{
   Port::Base64 base64;
   return base64.decode(data);
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
Io::Ostream::Byte::Byte(std::ostream &os)
   : m_os(os)
{
}

////////////////////////////////////////////////////////////////////////////////
void Io::Ostream::Byte::write(Buffer const &data)
{
   m_os << encode(data);
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
Io::Ostream::Hex::Hex(std::ostream &os)
   : Io::Ostream::Byte(os)
{
}

////////////////////////////////////////////////////////////////////////////////
std::string Io::Ostream::Hex::encode(Buffer const &data)
{
   std::stringstream ss;
   for(size_t i = 0; i < data.size(); i++)
   {
      ss << std::hex << std::setw(2) << std::setfill('0');
      ss << static_cast<int>(data[i]);
   }
   return ss.str();
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
Io::Ostream::Base64::Base64(std::ostream &os)
   : Io::Ostream::Byte(os)
{
}

////////////////////////////////////////////////////////////////////////////////
std::string Io::Ostream::Base64::encode(Buffer const &data)
{
   std::stringstream ss;
   Port::Base64 base64;
   ss << base64.encode(data);
   return ss.str();
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
namespace
{
   // This is the nasty bit.
   std::unique_ptr<Io::Istream::Byte> in(nullptr); 
   std::unique_ptr<Io::Ostream::Byte> out(nullptr);

   /////////////////////////////////////////////////////////////////////////////
   Io::Istream::Byte &get_stream(std::istream &is, Io::Encoding enc)
   {
      if(enc == Io::Encoding::Hex)
      {
         in.reset(new Io::Istream::Hex(is));
      }
      else if(enc == Io::Encoding::Base64)
      {
         in.reset(new Io::Istream::Base64(is));
      }
      else
      {
         assert(false);
      }
      return *in;
   }

   /////////////////////////////////////////////////////////////////////////////
   Io::Ostream::Byte &get_stream(std::ostream &os, Io::Encoding enc)
   {
      if(enc == Io::Encoding::Hex)
      {
         out.reset(new Io::Ostream::Hex(os));
      }
      else if(enc == Io::Encoding::Base64)
      {
         out.reset(new Io::Ostream::Base64(os));
      }
      else
      {
         assert(false);
      }
      return *out;
   }
} // namespace

////////////////////////////////////////////////////////////////////////////////
Io::Ostream::Byte &operator<<(std::ostream &os, Io::Encoding enc)
{
   return get_stream(os, enc);
}

////////////////////////////////////////////////////////////////////////////////
Io::Istream::Byte &operator>>(std::istream &is, Io::Encoding enc)
{
   return get_stream(is, enc);
}

