#include <mbedtls/md.h>
#include "crypto_mbedtls.h"
#include "buffer.h"

////////////////////////////////////////////////////////////////////////////////
namespace
{
   int const NO_HMAC = 0;
}

////////////////////////////////////////////////////////////////////////////////
Hash_mbedtls::Hash_mbedtls()
   : IHash()
   , m_md_context()
{
   mbedtls_md_info_t const * md_info = mbedtls_md_info_from_type(MBEDTLS_MD_SHA256);
   mbedtls_md_init(&m_md_context);
   mbedtls_md_setup(&m_md_context, md_info, NO_HMAC);
}

////////////////////////////////////////////////////////////////////////////////
Hash_mbedtls::~Hash_mbedtls()
{
   mbedtls_md_free(&m_md_context);
}

////////////////////////////////////////////////////////////////////////////////
Hash_mbedtls::Hash_mbedtls(Hash_mbedtls const &other)
   : m_md_context()
{
   mbedtls_md_clone(&m_md_context, &other.m_md_context);
}

////////////////////////////////////////////////////////////////////////////////
Hash_mbedtls &Hash_mbedtls::operator=(Hash_mbedtls const&)
{
   return *this;
}

////////////////////////////////////////////////////////////////////////////////
Hash_mbedtls::Hash_mbedtls(Hash_mbedtls &&other)
   : m_md_context()
{
   mbedtls_md_clone(&m_md_context, &other.m_md_context);
}

////////////////////////////////////////////////////////////////////////////////
Hash_mbedtls &Hash_mbedtls::operator=(Hash_mbedtls&&)
{
   return *this;
}

////////////////////////////////////////////////////////////////////////////////
IHash &Hash_mbedtls::operator<<(std::string const &data)
{
   (void)data;
   return *this;
}

////////////////////////////////////////////////////////////////////////////////
IHash &Hash_mbedtls::operator<<(Buffer const &data)
{
   (void)data;
   return *this;
}

////////////////////////////////////////////////////////////////////////////////
Buffer Hash_mbedtls::finalize()
{
   Buffer b(8);
   return b;
}

